// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}
enum StatusTypes {
  Pending
  Inprogress
  Completed
}


model User {
  id            String      @id @default(cuid())
  name          String
  firstName     String
  lastName      String
  phone         String      @unique
  email         String      @unique
  emailVerified DateTime?
  image         String?
  jobTitle      String?
  role          UserRole    @default(USER)
  password      String?
  status        Boolean     @default(true)
  accounts      Account[]
  sessions      Session[]
  isVerfied     Boolean     @default(false)
  token         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  WorkspaceIds     String[]
}


model Department {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  code             String
  description      String
  location         String
  budget           Int
  employeeCapacity Int
  isActive         Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Team {
  id           String      @id @default(cuid())
  name         String
  slug         String      @unique
  description  String
  members      Member[]
  tasks        Task[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Workspace    Workspace?  @relation(fields: [workspaceId], references: [id],onDelete: Cascade)
  workspaceId  String?
}

model Member {
  id             String   @id @default(cuid())
  name          String
  firstName     String
  lastName      String
  phone         String      @unique
  email         String      @unique
  image          String?
  jobTitle       String
  // tasks       TaskMember[]
  department     String
  employeeId     String
  employmentType String
  dateJoined     String
  description    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String?
}


model Task {
  id              String   @id @default(cuid())
  taskName        String
  // slug            String   @unique
  priority        String
  startDate       String
  endDate         String
  status          StatusTypes @default(Pending)
  team            Team     @relation(fields: [teamId], references: [id],onDelete: Cascade)
  teamId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notification {
  id         String   @id @default(cuid())
  message    String
  statusText String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Visibility {
  private
  public
}

model Workspace {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  ownerId     String
  themeColor  String
  visibility  Visibility @default(private)
  teams       Team[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Invitation {
    id                String     @id @default(cuid())
    email             String
    workspaceId       String
    inviteToken             String @unique
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
}